akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  # event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  # loglevel = DEBUG
  loglevel = INFO
  # log-config-on-start = on

  # threads need to be daemonic for proper shutdown of Tomcat; akka actors
  # are non-daemonic by default and they prevent the JVM from exiting; fixed
  # in spray 1.3.2-...
  # daemonic = on

  actor {
    debug {
      # autoreceive is off by default
      # autoreceive = on

      # enable DEBUG logging of actor lifecycle changes
      # lifecycle = on
    }
#   default-dispatcher {
#     throughput = 1
#     executor = "fork-join-executor"
#     fork-join-executor {
#       parallelism-min = 32
#       parallelism-factor = 16
#       parallelism-max = 2048
#     }
#   }
    default-dispatcher {
      throughput = 5 
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 64
        parallelism-factor = 16
        parallelism-max = 2048
      }
    }
  }

}

########################################
# akka-http-core Reference Config File #
########################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

# Akka HTTP version, checked against the runtime version of Akka HTTP.
# Loaded from generated conf file.
include "akka-http-version"

akka.http {
  server {
    # Enables/disables the addition of a `Remote-Address` header
    # holding the clients (remote) IP address.
    remote-address-header = on
  }
  # parsing {
  #   # The limits for the various parts of the HTTP message parser.
  #   max-chunk-size             = 256
  # }

  host-connection-pool {
    # The maximum number of parallel connections that a connection pool to a
    # single host endpoint is allowed to establish. Must be greater than zero.
    # default value: 4
    max-connections = 10
    
    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many
    # client flow materializations.
    # Note that with N concurrent materializations the max number of open
    # request in the pool will never exceed N * max-connections *
    # pipelining-limit.
    # Must be a power of 2 and > 0!
    # default value: 32
    max-open-requests = 1024
  }
}

